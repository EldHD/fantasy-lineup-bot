import logging
from typing import Tuple, Optional, List

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
)

from bot.config import (
    LEAGUES,
    LEAGUE_DISPLAY,
)
from bot.matches import (
    load_matches_for_league,
    render_matches_text,
    render_no_matches_error,
)

logger = logging.getLogger(__name__)

# -------------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ keyboards
# -------------------------------------------------
def leagues_keyboard() -> InlineKeyboardMarkup:
    rows = []
    for code in LEAGUES:
        rows.append([InlineKeyboardButton(LEAGUE_DISPLAY.get(code, code), callback_data=f"league:{code}")])
    return InlineKeyboardMarkup(rows)

def matches_keyboard(league_code: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh:{league_code}")],
        [InlineKeyboardButton("üèÅ –õ–∏–≥–∏", callback_data="back:leagues")],
    ])

# -------------------------------------------------
# /start
# -------------------------------------------------
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–≥—É:", reply_markup=leagues_keyboard())

# -------------------------------------------------
# –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ + —Å–±–æ—Ä —Ç–µ–∫—Å—Ç–∞/–∫–Ω–æ–ø–æ–∫
# -------------------------------------------------
async def _load_and_render_matches(league_code: str) -> Tuple[str, InlineKeyboardMarkup]:
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ‚Äú–∑–∞–≥—Ä—É–∂–∞—é‚Ä¶‚Äù –æ—Ç–¥–µ–ª—å–Ω–æ ‚Äì –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ handler
    matches, err = await load_matches_for_league(league_code, limit=15)
    if err:
        text = render_no_matches_error(league_code, err)
    else:
        text = render_matches_text(league_code, matches)
    kb = matches_keyboard(league_code)
    return text, kb

# -------------------------------------------------
# Callback: –≤—ã–±–æ—Ä –ª–∏–≥–∏
# -------------------------------------------------
async def league_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    _, league_code = data.split(":", 1)
    await query.edit_message_text(f"–õ–∏–≥–∞ –≤—ã–±—Ä–∞–Ω–∞: {LEAGUE_DISPLAY.get(league_code, league_code)}\n–ó–∞–≥—Ä—É–∂–∞—é –º–∞—Ç—á–∏...")
    try:
        text, kb = await _load_and_render_matches(league_code)
        await query.message.reply_text(text, reply_markup=kb)
    except Exception as e:
        logger.exception("Unhandled error loading matches")
        await query.message.reply_text("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# -------------------------------------------------
# Callback: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π
# -------------------------------------------------
async def refresh_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, league_code = query.data.split(":", 1)
    await query.edit_message_text("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π...")
    try:
        text, kb = await _load_and_render_matches(league_code)
        await query.edit_message_text(text, reply_markup=kb)
    except Exception:
        logger.exception("Error refreshing matches")
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.")
    
# -------------------------------------------------
# Callback: –Ω–∞–∑–∞–¥ –∫ –ª–∏–≥–∞–º
# -------------------------------------------------
async def back_to_leagues_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–≥—É:", reply_markup=leagues_keyboard())

# -------------------------------------------------
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
# -------------------------------------------------
def register_handlers(app):
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CallbackQueryHandler(league_callback, pattern=r"^league:"))
    app.add_handler(CallbackQueryHandler(refresh_callback, pattern=r"^refresh:"))
    app.add_handler(CallbackQueryHandler(back_to_leagues_callback, pattern=r"^back:leagues$"))
