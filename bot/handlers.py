from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from .matches import (
    get_upcoming_matches,
    get_match,
    get_teams_for_match,
    get_dummy_lineup,
    format_kickoff,
)

LEAGUES = [
    ("Premier League", "epl"),
    ("La Liga", "laliga"),
    ("Serie A", "seriea"),
    ("Bundesliga", "bundesliga"),
    ("Ligue 1", "ligue1"),
    ("Russian Premier League", "rpl"),
]

# ---------- /start ----------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —á–µ–º–ø–∏–æ–Ω–∞—Ç", callback_data="choose_league")],
        [InlineKeyboardButton("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–∞–≤", callback_data="choose_league")]  # –ø–æ–∫–∞ —Ç–æ—Ç –∂–µ —à–∞–≥
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# ---------- –í—ã–±–æ—Ä –ª–∏–≥ ----------

async def show_leagues(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"league_{code}")]
        for name, code in LEAGUES
    ]
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–≥—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# ---------- –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ª–∏–≥–∏: —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π ----------

async def handle_league_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    league_code = query.data.split("_", 1)[1]

    matches = get_upcoming_matches(league_code)
    if not matches:
        await query.edit_message_text(f"–ü–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç—á–µ–π –¥–ª—è –ª–∏–≥–∏ {league_code.upper()}")
        return

    buttons = []
    for m in matches:
        txt = f"{m['home_team']['name']} vs {m['away_team']['name']} ‚Ä¢ {format_kickoff(m['utc_kickoff'])}"
        buttons.append([InlineKeyboardButton(txt, callback_data=f"match_{m['id']}")])

    buttons.append([InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥ –∫ –ª–∏–≥–∞–º", callback_data="choose_league")])

    await query.edit_message_text(
        f"–ú–∞—Ç—á–∏ ({league_code.upper()}):",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

# ---------- –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–∞—Ç—á–∞: –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É ----------

async def handle_match_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    match_id = query.data.split("_", 1)[1]
    match = get_match(match_id)
    if not match:
        await query.edit_message_text("–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª.")
        return

    home, away = match["home_team"], match["away_team"]

    buttons = [
        [InlineKeyboardButton(f"{home['name']}", callback_data=f"team_{match_id}_{home['code']}")],
        [InlineKeyboardButton(f"{away['name']}", callback_data=f"team_{match_id}_{away['code']}")],
        [InlineKeyboardButton("‚¨Ö –ö –º–∞—Ç—á–∞–º", callback_data=f"league_{match['league']}")]
    ]

    header = (f"{home['name']} vs {away['name']}\n"
              f"{match['round']}\n"
              f"Kickoff: {format_kickoff(match['utc_kickoff'])}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:")

    await query.edit_message_text(header, reply_markup=InlineKeyboardMarkup(buttons))

# ---------- –ü—Ä–µ–¥–∏–∫—Ç —Å–æ—Å—Ç–∞–≤–∞ (–∑–∞–≥–ª—É—à–∫–∞) ----------

async def handle_team_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # callback: team_<matchid>_<teamcode>
    parts = query.data.split("_", 2)
    if len(parts) < 3:
        await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback.")
        return
    match_id = parts[1]
    team_code = parts[2]

    match = get_match(match_id)
    if not match:
        await query.edit_message_text("–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    lineup = get_dummy_lineup(match_id, team_code)

    lines = []
    for p in lineup:
        lines.append(f"{p['number']} {p['name']} ‚Äî {p['position']} | {p['probability']}% | {p['reason']}")
    text = (f"–ü—Ä–µ–¥–∏–∫—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ –¥–ª—è {team_code}:\n"
            f"{match['home_team']['name']} vs {match['away_team']['name']}\n"
            f"{match['round']} ‚Ä¢ {format_kickoff(match['utc_kickoff'])}\n\n" +
            "\n".join(lines) +
            "\n\n(–ü–æ–∑–∂–µ: –¥–æ–±–∞–≤–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏, —Å—Ç–∞—Ç—É—Å—ã OUT –∏ —Ç.–¥.)")

    buttons = [
        [InlineKeyboardButton("‚¨Ö –î—Ä—É–≥–∞—è –∫–æ–º–∞–Ω–¥–∞", callback_data=f"match_{match_id}")],
        [InlineKeyboardButton("‚¨Ö –ö –º–∞—Ç—á–∞–º", callback_data=f"league_{match['league']}")],
        [InlineKeyboardButton("üèÅ –õ–∏–≥–∏", callback_data="choose_league")]
    ]

    await query.edit_message_text(text[:4000], reply_markup=InlineKeyboardMarkup(buttons))  # Telegram –ª–∏–º–∏—Ç
