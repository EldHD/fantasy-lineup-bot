import logging
from datetime import timezone
from typing import List

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
)

from bot.services.matches import get_upcoming_matches_for_league, clear_matches_cache

logger = logging.getLogger(__name__)

# --------- –ö–û–ù–°–¢–ê–ù–¢–´ / –ö–û–ù–§–ò–ì ---------

LEAGUES = [
    ("Premier League", "epl"),
    ("La Liga", "laliga"),
    ("Serie A", "seriea"),
    ("Bundesliga", "bundesliga"),
    ("Ligue 1", "ligue1"),
    ("Russian Premier League", "rpl"),
]

# --------- –£–¢–ò–õ–ò–¢–´ –ö–õ–ê–í–ò–ê–¢–£–† ---------

def leagues_keyboard() -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(text=name, callback_data=f"league:{code}")]
            for name, code in LEAGUES]
    return InlineKeyboardMarkup(rows)

def matches_keyboard(league_code: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ôªÔ∏è –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_matches:{league_code}")],
        [InlineKeyboardButton("üèÅ –õ–∏–≥–∏", callback_data="back:leagues")],
    ])

def match_team_select_keyboard(league_code: str, match_index: int, home: str, away: str) -> InlineKeyboardMarkup:
    # (–ó–∞–≥–æ—Ç–æ–≤–∫–∞ ‚Äî –µ—Å–ª–∏ –ø–æ–∑–∂–µ –±—É–¥–µ—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É)
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(home, callback_data=f"team:{league_code}:{match_index}:home")],
        [InlineKeyboardButton(away, callback_data=f"team:{league_code}:{match_index}:away")],
        [InlineKeyboardButton("üèü –ú–∞—Ç—á–∏", callback_data=f"refresh_matches:{league_code}")],
        [InlineKeyboardButton("üèÅ –õ–∏–≥–∏", callback_data="back:leagues")],
    ])

# --------- /start ---------

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–≥—É:", reply_markup=leagues_keyboard())

# --------- CALLBACK: –í–´–ë–û–† –õ–ò–ì–ò ---------

async def league_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, league_code = query.data.split(":", 1)
    await query.edit_message_text(f"–õ–∏–≥–∞ –≤—ã–±—Ä–∞–Ω–∞: {league_code if league_code!='epl' else 'Premier League'}\n–ó–∞–≥—Ä—É–∂–∞—é –º–∞—Ç—á–∏...")
    await send_matches_list(query, league_code)

# --------- CALLBACK: –û–ë–ù–û–í–õ–ï–ù–ò–ï –ú–ê–¢–ß–ï–ô ---------

async def refresh_matches_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, league_code = query.data.split(":", 1)
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à —á—Ç–æ–±—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
    clear_matches_cache(league_code)
    await query.edit_message_text("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π...")
    await send_matches_list(query, league_code)

# --------- CALLBACK: –ù–ê–ó–ê–î –ö –õ–ò–ì–ê–ú ---------

async def back_to_leagues_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–≥—É:", reply_markup=leagues_keyboard())

# --------- –í–´–í–û–î –°–ü–ò–°–ö–ê –ú–ê–¢–ß–ï–ô (–æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è) ---------

async def send_matches_list(query, league_code: str):
    matches, meta = await get_upcoming_matches_for_league(league_code, limit=8)

    if matches:
        lines: List[str] = []
        lines.append(f"–ú–∞—Ç—á–∏ ({league_code}):")
        for idx, m in enumerate(matches, start=1):
            dt = m["kickoff_utc"].strftime("%Y-%m-%d %H:%M UTC")
            md = m.get("matchday") or "-"
            lines.append(f"{idx}. {m['home_team']} vs {m['away_team']} ‚Äî {dt} (—Ç—É—Ä/—Ä–∞—É–Ω–¥: {md})")
        text = "\n".join(lines)
        await query.edit_message_text(text, reply_markup=matches_keyboard(league_code))
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫
        reason = meta.get("reason") or "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
        season = meta.get("season_id")
        req_lines = []
        for r in meta.get("requests", []):
            req_lines.append(f"{r['status']} {'OK' if r['status']==200 else ''} {r['url'].split('/api/')[1][:60]}{'' if not r.get('err') else ' ERR'}")
        req_block = "\n".join(req_lines) if req_lines else "–Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤"

        link = meta.get("link")
        text = (
            f"–ù–µ—Ç –º–∞—Ç—á–µ–π (–ª–∏–≥–∞: {league_code})\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"–°–µ–∑–æ–Ω: {season}\n"
            f"–ó–∞–ø—Ä–æ—Å—ã:\n{req_block}"
        )
        if link:
            text += f"\n–ò—Å—Ç–æ—á–Ω–∏–∫: {link}"
        await query.edit_message_text(text, reply_markup=matches_keyboard(league_code))

# --------- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –•–ï–ù–î–õ–ï–†–û–í ---------

def register_handlers(app):
    app.add_handler(CommandHandler("start", start_cmd))

    app.add_handler(CallbackQueryHandler(league_callback, pattern=r"^league:"))
    app.add_handler(CallbackQueryHandler(refresh_matches_callback, pattern=r"^refresh_matches:"))
    app.add_handler(CallbackQueryHandler(back_to_leagues_callback, pattern=r"^back:leagues"))

# (–û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—à–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–æ–±–∞–≤—å—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ)v
