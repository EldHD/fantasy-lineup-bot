from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from bot.db.crud import (
    fetch_matches_by_league,
    fetch_match_with_teams,
    fetch_team_lineup_predictions,
)
from bot.db.seed import force_players_reset  # /force_seed (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å)

LEAGUES = [
    ("Premier League", "epl"),
    ("La Liga", "laliga"),
    ("Serie A", "seriea"),
    ("Bundesliga", "bundesliga"),
    ("Ligue 1", "ligue1"),
    ("Russian Premier League", "rpl"),
]

# –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ö–µ–º—ã (primary first)
TEAM_FORMATIONS = {
    "Arsenal": ["4-3-3", "4-2-3-1"],
    "Chelsea": ["4-2-3-1", "3-4-2-1"],
    "Zenit": ["4-2-3-1"],
    "CSKA Moscow": ["4-3-3"],
    # –¥–æ–±–∞–≤–∏—à—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∑–∂–µ
}


# ---------- –£—Ç–∏–ª–∏—Ç—ã —Å—Ö–µ–º ----------

def parse_formation(code: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict: {'def': x, 'mid': y, 'fwd': z} + –æ—Ä–∏–≥–∏–Ω–∞–ª.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã: "4-3-3", "4-2-3-1", "3-4-2-1" (–≥–¥–µ –Ω—É–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å—Ä–µ–¥–Ω–∏–µ).
    –ü—Ä–∞–≤–∏–ª–æ: –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç = –Ω–∞–ø–∞–¥–∞—é—â–∏–µ.
    –û—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–∂–¥—É –ø–µ—Ä–≤—ã–º –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å—É–º–º–∏—Ä—É—é—Ç—Å—è –∫–∞–∫ midfielders.
    """
    parts = [int(p) for p in code.split("-")]
    if len(parts) < 3:
        raise ValueError(f"Unsupported formation code: {code}")
    defenders = parts[0]
    forwards = parts[-1]
    mids = sum(parts[1:-1])
    return {
        "code": code,
        "def": defenders,
        "mid": mids,
        "fwd": forwards,
    }


def classify_role(row, formation_meta):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É: goalkeeper | defender | midfielder | forward
    –° —É—á—ë—Ç–æ–º wingers (RW/LW/W): –µ—Å–ª–∏ forwards >=3 (–Ω–∞–ø—Ä–∏–º–µ—Ä 4-3-3) -> winger -> forward,
    –∏–Ω–∞—á–µ -> midfielder.
    """
    pos_main = row["position_main"].lower()
    detail = (row["position_detail"] or "").upper()

    if pos_main == "goalkeeper" or detail == "GK":
        return "goalkeeper"

    # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–±–æ—Ä—ã
    defenders = {"CB", "RCB", "LCB", "RB", "LB", "RWB", "LWB", "CB-L", "CB-R"}
    dm_set = {"DM", "CDM", "DMC"}
    mid_core = {"CM", "RCM", "LCM", "CM-L", "CM-R"}
    am_set = {"AM", "CAM", "LAM", "RAM", "10"}
    winger_set = {"RW", "LW", "W"}
    forward_set = {"CF", "ST", "FW", "SS", "9"}

    # By detail first
    if detail in defenders:
        return "defender"
    if detail in dm_set or detail in mid_core or detail in am_set:
        return "midfielder"
    if detail in forward_set:
        return "forward"
    if detail in winger_set:
        # —Ä–µ—à–∞–µ–º –ø–æ —Å—Ö–µ–º–µ
        if formation_meta["fwd"] >= 3:
            return "forward"
        else:
            return "midfielder"

    # fallback –ø–æ main
    if pos_main == "defender":
        return "defender"
    if pos_main == "midfielder":
        return "midfielder"
    if pos_main == "forward":
        return "forward"

    # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é midfielder
    return "midfielder"


# ---------- –•–µ–Ω–¥–ª–µ—Ä—ã ----------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(name, callback_data=f"league_{code}")]
        for name, code in LEAGUES
    ]
    markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–≥—É:", reply_markup=markup)
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–≥—É:",
            reply_markup=markup
        )


async def back_to_leagues(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await start(update, context)


async def handle_league_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    league_code = query.data.split("_", 1)[1]

    matches = await fetch_matches_by_league(league_code)
    if not matches:
        buttons = [[InlineKeyboardButton("‚¨Ö –ö –ª–∏–≥–∞–º", callback_data="back_leagues")]]
        await query.edit_message_text(
            f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è {league_code.upper()}",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        return

    buttons = []
    for m in matches:
        txt = f"{m['home_team_name']} vs {m['away_team_name']} ‚Ä¢ {m['utc_kickoff']:%Y-%m-%d %H:%M UTC}"
        buttons.append([InlineKeyboardButton(txt, callback_data=f"matchdb_{m['id']}")])

    buttons.append([InlineKeyboardButton("‚¨Ö –ö –ª–∏–≥–∞–º", callback_data="back_leagues")])

    await query.edit_message_text(
        f"–ú–∞—Ç—á–∏ ({league_code.upper()}):",
        reply_markup=InlineKeyboardMarkup(buttons)
    )


async def handle_db_match_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    match_id = int(query.data.split("_", 1)[1])

    match = await fetch_match_with_teams(match_id)
    if not match:
        await query.edit_message_text(
            "–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨Ö –õ–∏–≥–∏", callback_data="back_leagues")]]
            )
        )
        return

    buttons = [
        [InlineKeyboardButton(match["home"]["name"], callback_data=f"teamdb_{match['id']}_{match['home']['id']}")],
        [InlineKeyboardButton(match["away"]["name"], callback_data=f"teamdb_{match['id']}_{match['away']['id']}")],
        [InlineKeyboardButton("‚¨Ö –ú–∞—Ç—á–∏", callback_data=f"league_{match['tournament_code']}")],
        [InlineKeyboardButton("üèÅ –õ–∏–≥–∏", callback_data="back_leagues")]
    ]
    header = (
        f"{match['home']['name']} vs {match['away']['name']}\n"
        f"{match['round']}\n"
        f"Kickoff: {match['utc_kickoff']:%Y-%m-%d %H:%M UTC}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:"
    )
    await query.edit_message_text(header, reply_markup=InlineKeyboardMarkup(buttons))


async def handle_team_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    parts = query.data.split("_", 2)
    if len(parts) < 3:
        await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback.")
        return

    match_id = int(parts[1])
    team_id = int(parts[2])

    rows = await fetch_team_lineup_predictions(match_id, team_id)
    if not rows:
        await query.edit_message_text(
            "–ù–µ—Ç –ø—Ä–µ–¥–∏–∫—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"matchdb_{match_id}")]]
            )
        )
        return

    # –ü–æ–ª—É—á–∏–º –∏–º—è –∫–æ–º–∞–Ω–¥—ã (–µ—Å—Ç—å –≤ data? ‚Äî –ø–æ–∫–∞ –Ω–µ—Ç ‚Üí –≤—ã–≤–µ–¥–µ–º –±–µ–∑)
    # –ú–æ–∂–Ω–æ –ø–æ–∑–∂–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å fetch_team_lineup_predictions –≤–æ–∑–≤—Ä–∞—Ç–æ–º team_name.

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ö–µ–º—É
    # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –æ–¥–Ω–æ–≥–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ (–±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É)
    team_name_guess = None
    # (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å map player_id -> team_name)
    # –°–µ–π—á–∞—Å –ø—Ä–æ–ø—É—Å—Ç–∏–º –∏ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –±–µ–∑ –∏–º–µ–Ω–∏ fallback.

    formation_list = []
    if team_name_guess and team_name_guess in TEAM_FORMATIONS:
        formation_list = TEAM_FORMATIONS[team_name_guess]
    else:
        # fallback ‚Äî –≤–æ–∑—å–º—ë–º 4-2-3-1 –∫–∞–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é
        # (–î–ª—è –ø—Ä–∏–º–µ—Ä–∞: Zenit, Arsenal, Chelsea ‚Äî –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ; –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥—ë—Ç ‚Äî –¥–µ—Ñ–æ–ª—Ç)
        formation_list = TEAM_FORMATIONS.get(team_name_guess, ["4-2-3-1"])

    formation_code = formation_list[0]
    formation_meta = parse_formation(formation_code)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
    out_players = [r for r in rows if r["status_availability"] == "OUT"]
    doubt_players = [r for r in rows if r["status_availability"] == "DOUBT"]
    ok_players = [r for r in rows if r["status_availability"] in (None, "OK")]

    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–æ–ª–µ–π –ø–æ–¥ —Å—Ö–µ–º—É
    for r in rows:
        r["_role"] = classify_role(r, formation_meta)

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ —Å–≤–æ–∏—Ö –≥—Ä—É–ø–ø
    def prob_sort(rs):
        return sorted(
            rs,
            key=lambda r: (
                {"goalkeeper": 0, "defender": 1, "midfielder": 2, "forward": 3}.get(r["_role"], 99),
                -r["probability"],
                r["full_name"].lower()
            )
        )

    ok_sorted = prob_sort(ok_players)
    doubt_sorted = prob_sort(doubt_players)

    # –û—Ç–±–æ—Ä
    starters = []

    # 1. GK
    gk_ok = [r for r in ok_sorted if r["_role"] == "goalkeeper"]
    gk_doubt = [r for r in doubt_sorted if r["_role"] == "goalkeeper"]
    if gk_ok:
        starters.append(gk_ok[0])
    elif gk_doubt:
        starters.append(gk_doubt[0])
    else:
        # –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π ‚Äî –Ω–µ—Ç GK
        candidates_any = (ok_sorted + doubt_sorted)
        if candidates_any:
            starters.append(candidates_any[0])

    starter_ids = {r["player_id"] for r in starters}

    # 2. DEF
    need_def = formation_meta["def"]
    def_pool_ok = [r for r in ok_sorted if r["_role"] == "defender" and r["player_id"] not in starter_ids]
    def_pool_doubt = [r for r in doubt_sorted if r["_role"] == "defender" and r["player_id"] not in starter_ids]

    for pool in (def_pool_ok, def_pool_doubt):
        for r in pool:
            if len([s for s in starters if s["_role"] == "defender"]) >= need_def:
                break
            starters.append(r)
            starter_ids.add(r["player_id"])

    # 3. MID
    need_mid = formation_meta["mid"]
    mid_pool_ok = [r for r in ok_sorted if r["_role"] == "midfielder" and r["player_id"] not in starter_ids]
    mid_pool_doubt = [r for r in doubt_sorted if r["_role"] == "midfielder" and r["player_id"] not in starter_ids]

    for pool in (mid_pool_ok, mid_pool_doubt):
        for r in pool:
            if len([s for s in starters if s["_role"] == "midfielder"]) >= need_mid:
                break
            starters.append(r)
            starter_ids.add(r["player_id"])

    # 4. FWD
    need_fwd = formation_meta["fwd"]
    fwd_pool_ok = [r for r in ok_sorted if r["_role"] == "forward" and r["player_id"] not in starter_ids]
    fwd_pool_doubt = [r for r in doubt_sorted if r["_role"] == "forward" and r["player_id"] not in starter_ids]

    for pool in (fwd_pool_ok, fwd_pool_doubt):
        for r in pool:
            if len([s for s in starters if s["_role"] == "forward"]) >= need_fwd:
                break
            starters.append(r)
            starter_ids.add(r["player_id"])

    # 5. –ï—Å–ª–∏ < 11 –¥–æ–±–∏—Ä–∞–µ–º –ª—É—á—à–∏—Ö –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è (OK ‚Üí DOUBT)
    if len(starters) < 11:
        remaining_ok = [r for r in ok_sorted if r["player_id"] not in starter_ids]
        remaining_doubt = [r for r in doubt_sorted if r["player_id"] not in starter_ids]
        for r in remaining_ok + remaining_doubt:
            if len(starters) >= 11:
                break
            starters.append(r)
            starter_ids.add(r["player_id"])

    # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª
    potential = []
    used_ids = starter_ids
    for r in ok_sorted + doubt_sorted:
        if r["player_id"] not in used_ids:
            potential.append(r)

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    def fmt_line(r):
        pos = r["position_detail"] or r["position_main"]
        tags = []
        if r["status_availability"] == "DOUBT":
            tags.append("‚ùì Doubt")
        if r["status_availability"] == "OUT":
            tags.append("‚ùå OUT")  # (theoretical, –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Å—Ç–∞—Ä—Ç)
        if r["status_availability"] == "DOUBT" and r in starters:
            tags.append("(* —Ä–∏—Å–∫)")
        line = f"{r['number'] or '-'} {r['full_name']} ‚Äî {pos} | {r['probability']}%"
        if tags:
            line += " | " + " ".join(tags)
        explain_parts = []
        if r["explanation"]:
            explain_parts.append(r["explanation"])
        if r["status_reason"]:
            explain_parts.append(r["status_reason"])
        if explain_parts:
            line += "\n  " + "; ".join(explain_parts)
        return line

    starters_formatted = [fmt_line(r) for r in starters]
    out_formatted = []
    for r in out_players:
        out_formatted.append(fmt_line(r))
    potential_formatted = [fmt_line(r) for r in potential]

    text_parts = [
        f"–°—Ö–µ–º–∞: {formation_meta['code']}",
        "–ü—Ä–µ–¥–∏–∫—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ (–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ):\n",
        "‚úÖ –°—Ç–∞—Ä—Ç:\n" + "\n".join(starters_formatted)
    ]

    if len(starters_formatted) < 11:
        text_parts.append(f"\n‚ö†Ô∏è –¢–æ–ª—å–∫–æ {len(starters_formatted)} –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å—Ç–∞—Ä—Ç–µ (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö).")

    if out_formatted:
        text_parts.append("\n‚ùå –ù–µ —Å—ã–≥—Ä–∞—é—Ç:\n" + "\n".join(out_formatted))

    if potential_formatted:
        text_parts.append("\nüîÅ –í–æ–∑–º–æ–∂–Ω—ã / —Å–∫–∞–º–µ–π–∫–∞:\n" + "\n".join(potential_formatted))

    text = "\n".join(text_parts)
    if len(text) > 3900:
        text = text[:3900] + "\n‚Ä¶ (–æ–±—Ä–µ–∑–∞–Ω–æ)"

    buttons = [
        [InlineKeyboardButton("‚¨Ö –î—Ä—É–≥–∞—è –∫–æ–º–∞–Ω–¥–∞", callback_data=f"matchdb_{match_id}")],
        [InlineKeyboardButton("üèÅ –õ–∏–≥–∏", callback_data="back_leagues")]
    ]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(buttons))


# /force_seed
async def force_seed_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚è≥ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—é –∏–≥—Ä–æ–∫–æ–≤/–ø—Ä–µ–¥–∏–∫—Ç—ã/—Å—Ç–∞—Ç—É—Å—ã...")
    await force_players_reset()
    await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ. /start")
