import logging
from typing import List, Tuple, Optional

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
)

# –ü–∞—Ä—Å–µ—Ä –º–∞—Ç—á–µ–π (–Ω–∞—à –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å)
from bot.matches import load_matches_for_league

logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã / –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---

LEAGUES = [
    ("Premier League", "epl"),
    ("La Liga", "laliga"),
    ("Serie A", "seriea"),
    ("Bundesliga", "bundesliga"),
    ("Ligue 1", "ligue1"),
    ("Russian Premier League", "rpl"),
]

# CallbackData ‚Äú–ø—Ä–æ—Å—Ç–æ–≥–æ‚Äù —Ñ–æ—Ä–º–∞—Ç–∞:
#   league:<code>
#   refresh_matches:<code>
#   back:leagues
#   match:<league_code>:<match_id>
#
# (match_id –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π ‚Äì –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è –±—É–¥—É—â–µ–≥–æ.)

# --- –£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---

def leagues_keyboard() -> InlineKeyboardMarkup:
    rows = []
    for title, code in LEAGUES:
        rows.append([InlineKeyboardButton(title, callback_data=f"league:{code}")])
    return InlineKeyboardMarkup(rows)

def matches_keyboard(league_code: str, matches: List[dict]) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ –º–∞—Ç—á–µ–π:
      - –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞: "Home vs Away" (match:<league_code>:<id>)
      - –≤–Ω–∏–∑—É: –û–±–Ω–æ–≤–∏—Ç—å / –õ–∏–≥–∏
    """
    rows: List[List[InlineKeyboardButton]] = []
    for m in matches:
        # –§–æ–ª–±—ç–∫ –µ—Å–ª–∏ –Ω–µ—Ç id
        mid = m.get("id") or 0
        home = m.get("home") or "?"
        away = m.get("away") or "?"
        caption = f"{home} vs {away}"
        rows.append([
            InlineKeyboardButton(
                caption,
                callback_data=f"match:{league_code}:{mid}"
            )
        ])
    rows.append([
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_matches:{league_code}")
    ])
    rows.append([
        InlineKeyboardButton("üèÅ –õ–∏–≥–∏", callback_data="back:leagues")
    ])
    return InlineKeyboardMarkup(rows)

def error_matches_keyboard(league_code: str) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ / –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –º–∞—Ç—á–µ–π ‚Äì —Ç–æ–ª—å–∫–æ –û–±–Ω–æ–≤–∏—Ç—å + –õ–∏–≥–∏
    """
    rows = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_matches:{league_code}")],
        [InlineKeyboardButton("üèÅ –õ–∏–≥–∏", callback_data="back:leagues")],
    ]
    return InlineKeyboardMarkup(rows)

def back_leagues_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üèÅ –õ–∏–≥–∏", callback_data="back:leagues")]
    ])

# --- –•–ï–õ–ü–ï–†: –∑–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç—á–µ–π –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ ---

async def _load_and_render_matches(league_code: str) -> Tuple[str, InlineKeyboardMarkup]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞—Ç—á–∏ –¥–ª—è –ª–∏–≥–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—Ç—á–∏ ‚Äì —Å–ø–∏—Å–æ–∫.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äì –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    matches, err = await load_matches_for_league(league_code, limit=15)
    if err:
        text = err
        kb = error_matches_keyboard(league_code)
        return text, kb

    if not matches:
        text = f"–ù–µ—Ç –º–∞—Ç—á–µ–π (–ª–∏–≥–∞: {league_code}) ‚Äì –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –±–µ–∑ —è–≤–Ω–æ–π –æ—à–∏–±–∫–∏."
        kb = error_matches_keyboard(league_code)
        return text, kb

    # –§–æ—Ä–º–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Å–ø–∏—Å–æ–∫
    lines = [f"–ú–∞—Ç—á–∏ (–ª–∏–≥–∞: {league_code}, –Ω–∞–π–¥–µ–Ω–æ: {len(matches)}):"]
    for i, m in enumerate(matches, 1):
        home = m.get("home") or "?"
        away = m.get("away") or "?"
        ts = m.get("startTimestamp")
        # TODO: –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è (UTC ‚Üí –ª–æ–∫–∞–ª—å–Ω–æ).
        lines.append(f"{i}. {home} vs {away} (id={m.get('id')}, ts={ts})")
    lines.append("")
    lines.append("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è (–≤ –±—É–¥—É—â–µ–º) –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥–∏–∫—Ç–∞ —Å–æ—Å—Ç–∞–≤–∞.")
    text = "\n".join(lines)
    kb = matches_keyboard(league_code, matches)
    return text, kb

# --- HANDLERS ---

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /start ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–∏–≥.
    """
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–≥—É:", reply_markup=leagues_keyboard())

async def league_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ª–∏–≥—É (callback_data=league:<code>)
    1. –û—Ç–≤–µ—á–∞–µ–º "–õ–∏–≥–∞ –≤—ã–±—Ä–∞–Ω–∞..."
    2. –ü–∏—à–µ–º "–ó–∞–≥—Ä—É–∂–∞—é –º–∞—Ç—á–∏..."
    3. –ì—Ä—É–∑–∏–º –º–∞—Ç—á–∏
    4. –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    """
    query = update.callback_query
    if not query:
        return

    await query.answer()
    data = query.data  # league:epl
    _, league_code = data.split(":", 1)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ
    await query.edit_message_text(f"–õ–∏–≥–∞ –≤—ã–±—Ä–∞–Ω–∞: {league_code.title()}\n–ó–∞–≥—Ä—É–∂–∞—é –º–∞—Ç—á–∏...")
    # –í—Å—Ç–∞–≤–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ ‚Äú–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π...‚Äù —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    # –ú–æ–∂–Ω–æ –ø–æ—Å–ª–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –∏–∑–º–µ–Ω–∏–º —Ç–µ–∫—É—â–µ–µ.
    await query.message.chat.send_message("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π...")

    text, kb = await _load_and_render_matches(league_code)
    await query.message.chat.send_message(text, reply_markup=kb)

async def refresh_matches_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Callback "refresh_matches:<code>" ‚Äì –∑–∞–Ω–æ–≤–æ –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç –º–∞—Ç—á–∏.
    """
    query = update.callback_query
    if not query:
        return
    await query.answer()
    _, league_code = query.data.split(":", 1)

    # –û–±–Ω–æ–≤–∏–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (query.message) —Ç–µ–∫—Å—Ç–æ–º ‚Äú–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π...‚Äù
    try:
        await query.edit_message_text(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π... (–ª–∏–≥–∞: {league_code})")
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ) ‚Äì –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        pass

    text, kb = await _load_and_render_matches(league_code)
    # –û—Ç–ø—Ä–∞–≤–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç –Ω–µ–ª—å–∑—è)
    await query.message.chat.send_message(text, reply_markup=kb)

async def back_leagues_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ª–∏–≥.
    """
    query = update.callback_query
    if query:
        await query.answer()
        try:
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–≥—É:", reply_markup=leagues_keyboard())
            return
        except Exception:
            pass
        await query.message.chat.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–≥—É:", reply_markup=leagues_keyboard())
    else:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –Ω–∞–ø—Ä—è–º—É—é
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–≥—É:", reply_markup=leagues_keyboard())

async def match_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞—Ç—á.
    –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ ‚Äì –∑–¥–µ—Å—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç–µ –ø—Ä–µ–¥–∏–∫—Ç —Å–æ—Å—Ç–∞–≤–∞.
    callback_data = match:<league_code>:<match_id>
    """
    query = update.callback_query
    if not query:
        return
    await query.answer()
    _, league_code, match_id = query.data.split(":", 2)

    # TODO: –∑–¥–µ—Å—å –≤—ã—Ç—è–≥–∏–≤–∞–µ—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –º–∞—Ç—á–∞ + –ø—Ä–µ–¥–∏–∫—Ç—ã.
    # –ù–∞–ø—Ä–∏–º–µ—Ä:
    # predictions = await fetch_predictions_for_match(match_id)  # –µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑—É–µ—Ç–µ
    text = (
        f"–ú–∞—Ç—á –≤—ã–±—Ä–∞–Ω (–ª–∏–≥–∞={league_code}, id={match_id}).\n"
        f"–ü–æ–∫–∞ –ø—Ä–µ–¥–∏–∫—Ç–æ–≤ –Ω–µ—Ç.\n"
        f"–ù–∞–∂–º–∏—Ç–µ ‚ñ∑ –õ–∏–≥–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞."
    )
    await query.edit_message_text(text, reply_markup=back_leagues_keyboard())

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π error handler (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äì —á—Ç–æ–±—ã –ª–æ–≤–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è)
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.exception("Unhandled error", exc_info=context.error)
    try:
        if isinstance(update, Update):
            if update.effective_chat:
                await update.effective_chat.send_message("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception:
        pass

# --- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –•–ï–ù–î–õ–ï–†–û–í ---

def register_handlers(application):
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äì –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ main.py:
        from bot.handlers import register_handlers
        register_handlers(app)
    """
    application.add_handler(CommandHandler("start", start_cmd))

    # –ö–æ–ª–±—ç–∫–∏
    application.add_handler(CallbackQueryHandler(league_callback, pattern=r"^league:"))
    application.add_handler(CallbackQueryHandler(refresh_matches_callback, pattern=r"^refresh_matches:"))
    application.add_handler(CallbackQueryHandler(back_leagues_callback, pattern=r"^back:leagues$"))
    application.add_handler(CallbackQueryHandler(match_callback, pattern=r"^match:"))

    # –û—à–∏–±–∫–∏
    application.add_error_handler(error_handler)

# (–ï—Å–ª–∏ —Å—Ç–∞—Ä—ã–π –∫–æ–¥ –æ–∂–∏–¥–∞–ª –ø—Ä—è–º—ã–µ –∏–º–µ–Ω–∞ ‚Äì –æ—Å—Ç–∞–≤–∏–º –∏—Ö —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–º–∏)
__all__ = [
    "start_cmd",
    "league_callback",
    "refresh_matches_callback",
    "back_leagues_callback",
    "match_callback",
    "error_handler",
    "register_handlers",
]
