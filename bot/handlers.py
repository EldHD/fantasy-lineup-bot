import logging
from datetime import datetime, timezone
from typing import List, Tuple, Optional

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
)

from bot.config import (
    LEAGUE_DISPLAY,         # dict: code -> human name (e.g. "epl": "Premier League")
    LEAGUE_CODES,           # iterable of league codes in –ø–æ—Ä—è–¥–∫–µ –ø–æ–∫–∞–∑–∞ (e.g. ["epl","laliga","seriea",...])
)
from bot.matches import (
    load_matches_for_league,
    render_matches_text,
)

logger = logging.getLogger(__name__)


# ==============================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ==============================

def _kb(rows: List[List[Tuple[str, str]]]) -> InlineKeyboardMarkup:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å (text, callback_data) –≤ InlineKeyboardMarkup.
    rows: [[("Text1","cb1"),("Text2","cb2")], [...], ...]
    """
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(text=txt, callback_data=cb) for (txt, cb) in row]
        for row in rows
    ])


def _league_buttons() -> InlineKeyboardMarkup:
    """
    –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ª–∏–≥–∏ (–≤ 2 —Å—Ç—Ä–æ–∫–∏ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ ‚Äî –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å).
    """
    # –†–∞–∑–æ–±—å—ë–º –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ä—è–¥ –ø–æ 3‚Äì4 –≤ —Å—Ç—Ä–æ–∫–µ
    per_row = 3
    rows: List[List[Tuple[str, str]]] = []
    row: List[Tuple[str, str]] = []
    for code in LEAGUE_CODES:
        row.append((LEAGUE_DISPLAY.get(code, code), f"league:{code}"))
        if len(row) >= per_row:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    return _kb(rows)


async def _load_and_render_matches(league_code: str):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞—Ç—á–∏ –ª–∏–≥–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç + –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (text, keyboard)
    """
    display = LEAGUE_DISPLAY.get(league_code, league_code)
    matches, err = await load_matches_for_league(league_code)

    if err:
        # –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ / –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–∞—Ç—á–∏
        text = err
        kb_rows = [
            [("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", f"matches_refresh:{league_code}")],
            [("üèÅ –õ–∏–≥–∏", "back_leagues")],
        ]
        return text, _kb(kb_rows)

    text = render_matches_text(display, matches)

    # –ö–Ω–æ–ø–∫–∏ –ø–æ –º–∞—Ç—á–∞–º
    kb_rows: List[List[Tuple[str, str]]] = []
    for m in matches:
        home = m.get("home")
        away = m.get("away")
        mid = m.get("match_id")
        # –ö–Ω–æ–ø–∫–∞ –º–∞—Ç—á–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã
        btn_txt = f"{home} vs {away}"
        kb_rows.append([(btn_txt, f"match:{league_code}:{mid}")])

    kb_rows.append([("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", f"matches_refresh:{league_code}")])
    kb_rows.append([("üèÅ –õ–∏–≥–∏", "back_leagues")])
    return text, _kb(kb_rows)


# ==============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# ==============================

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /start ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ª–∏–≥.
    """
    if update.effective_chat:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–≥—É:",
            reply_markup=_league_buttons()
        )


# ==============================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK
# ==============================

async def league_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ª–∏–≥–∏: league:<code>
    """
    query = update.callback_query
    if not query:
        return

    await query.answer()
    data = query.data or ""
    _, league_code = data.split(":", 1)

    display = LEAGUE_DISPLAY.get(league_code, league_code)

    # –°–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫–∞ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    try:
        await query.edit_message_text(
            text=f"–õ–∏–≥–∞ –≤—ã–±—Ä–∞–Ω–∞: {display}\n–ó–∞–≥—Ä—É–∂–∞—é –º–∞—Ç—á–∏..."
        )
    except Exception:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ), –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
        if update.effective_chat:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"–õ–∏–≥–∞ –≤—ã–±—Ä–∞–Ω–∞: {display}\n–ó–∞–≥—Ä—É–∂–∞—é –º–∞—Ç—á–∏..."
            )

    try:
        text, kb = await _load_and_render_matches(league_code)
    except Exception as e:
        logger.exception("Unhandled exception loading matches for %s", league_code)
        text = "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        kb = _kb([[("üèÅ –õ–∏–≥–∏", "back_leagues")]])

    # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if query.message:
        try:
            await query.edit_message_text(text=text, reply_markup=kb)
        except Exception:
            # fallback ‚Äì –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
            if update.effective_chat:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=text,
                    reply_markup=kb
                )


async def matches_refresh_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–µ–π: matches_refresh:<league_code>
    """
    query = update.callback_query
    if not query:
        return
    await query.answer()
    data = query.data or ""
    _, league_code = data.split(":", 1)
    display = LEAGUE_DISPLAY.get(league_code, league_code)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç ‚Äú–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π...‚Äù
    try:
        await query.edit_message_text(
            text=f"–õ–∏–≥–∞: {display}\n–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–µ–π..."
        )
    except Exception:
        pass

    try:
        text, kb = await _load_and_render_matches(league_code)
    except Exception:
        logger.exception("Error refreshing matches %s", league_code)
        text = "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        kb = _kb([[("üèÅ –õ–∏–≥–∏", "back_leagues")]])

    if query.message:
        try:
            await query.edit_message_text(text=text, reply_markup=kb)
        except Exception:
            if update.effective_chat:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=text,
                    reply_markup=kb
                )


async def match_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –º–∞—Ç—á–∞: match:<league_code>:<match_id>
    –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã (home/away) –∏–ª–∏ —Å—Ä–∞–∑—É –ø—Ä–µ–¥–∏–∫—Ç—ã.
    """
    query = update.callback_query
    if not query:
        return
    await query.answer()
    _, league_code, match_id_str = (query.data or "").split(":")
    match_id = int(match_id_str)

    # –ó–∞–≥–ª—É—à–∫–∞ (–≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º: –ø–æ–¥—Ç—è–Ω—É—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø—Ä–µ–¥–∏–∫—Ç—ã, —Å–æ—Å—Ç–∞–≤—ã)
    text = (
        f"–ú–∞—Ç—á ID: {match_id}\n"
        f"–õ–∏–≥–∞: {LEAGUE_DISPLAY.get(league_code, league_code)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–∏–∫—Ç–∞ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞):"
    )

    kb = _kb([
        [("Home —Å–æ—Å—Ç–∞–≤", f"team:{league_code}:{match_id}:home")],
        [("Away —Å–æ—Å—Ç–∞–≤", f"team:{league_code}:{match_id}:away")],
        [("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–∞—Ç—á–∞–º", f"matches_refresh:{league_code}")],
        [("üèÅ –õ–∏–≥–∏", "back_leagues")],
    ])
    try:
        await query.edit_message_text(text=text, reply_markup=kb)
    except Exception:
        if update.effective_chat:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=text,
                reply_markup=kb
            )


async def team_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –≤—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã: team:<league_code>:<match_id>:<side>
    –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞.
    –ü–æ–∫–∞ ‚Äî –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞.
    """
    query = update.callback_query
    if not query:
        return
    await query.answer()
    _, league_code, match_id_str, side = (query.data or "").split(":")
    match_id = int(match_id_str)

    # TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–µ–¥–∏–∫—Ç–æ–≤
    text = (
        f"–ü—Ä–µ–¥–∏–∫—Ç —Å–æ—Å—Ç–∞–≤–∞ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)\n"
        f"–ú–∞—Ç—á #{match_id}\n"
        f"–ö–æ–º–∞–Ω–¥–∞: {'Home' if side == 'home' else 'Away'}\n"
        f"–õ–∏–≥–∞: {LEAGUE_DISPLAY.get(league_code, league_code)}\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤."
    )

    kb = _kb([
        [("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–∞—Ç—á—É", f"match:{league_code}:{match_id}")],
        [("üèÅ –õ–∏–≥–∏", "back_leagues")],
    ])

    try:
        await query.edit_message_text(text=text, reply_markup=kb)
    except Exception:
        if update.effective_chat:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=text,
                reply_markup=kb
            )


async def back_leagues_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ª–∏–≥: back_leagues
    """
    query = update.callback_query
    if query:
        await query.answer()
        try:
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–≥—É:", reply_markup=_league_buttons())
            return
        except Exception:
            pass
    if update.effective_chat:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–≥—É:",
            reply_markup=_league_buttons()
        )


# ==============================
# –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
# ==============================

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.
    –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π stacktrace, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    logger.exception("Unhandled exception: update=%s error=%s", update, context.error)
    # –£–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —ç—Ç–æ Update —Å —á–∞—Ç–æ–º
    try:
        if isinstance(update, Update) and update.effective_chat:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except Exception:  # noqa
        pass


# ==============================
# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
# ==============================

def register_handlers(app: Application):
    """
    –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –∫ Application.
    –í—ã–∑–≤–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
    """
    app.add_handler(CommandHandler("start", start_cmd))

    # OPTIONAL: –î–æ–±–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã):
    # app.add_handler(CommandHandler("sync_roster", sync_roster_cmd))
    # app.add_handler(CommandHandler("resync_all", resync_all_cmd))
    # app.add_handler(CommandHandler("export", export_cmd))

    app.add_handler(CallbackQueryHandler(league_callback, pattern=r"^league:"))
    app.add_handler(CallbackQueryHandler(matches_refresh_callback, pattern=r"^matches_refresh:"))
    app.add_handler(CallbackQueryHandler(match_callback, pattern=r"^match:"))
    app.add_handler(CallbackQueryHandler(team_callback, pattern=r"^team:"))
    app.add_handler(CallbackQueryHandler(back_leagues_callback, pattern=r"^back_leagues$"))

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)
